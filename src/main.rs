use std::convert::TryInto;
use std::env;
use std::process;
use std::fs;
use std::fs::File;
use std::io::prelude::*;
//
pub struct Config {
    pub mode: String,
    pub key: String,
    pub input_file_path: String,
    pub output_file_path: String,
}
//
impl Config {
    fn build(args: &[String]) -> Result<Config, &'static str> {
        if args.len() < 5 {
            info();
            return Err("not enough arguments");
        }
        let mode = args[1].clone();
        let key  = args[2].clone();
        let input_file_path = args[3].clone();
        let output_file_path = args[4].clone();
        Ok(Config { mode,key, input_file_path, output_file_path })
    }
}
//
fn open_key_file(config: &Config) -> String {
    let key = fs::read_to_string(&config.key)
        .expect("Should have been able to read the key file");
    println!("key length: {}",key.len());
    key
}
//
fn read_input_file(config: &Config) -> (Vec<u8>, usize) {
    let bytes = fs::read(&config.input_file_path).unwrap();
    let mut vector_contents:Vec<u8>= vec![];
    let mut size = 0;
    for (index,byte_pair) in bytes.chunks_exact(1).enumerate() {
        vector_contents.push(byte_pair[0] as u8);
        size = index;
    }
    println!("Input file {} with size {}",&config.input_file_path,size);
    (vector_contents,size)
}
//
fn write_output_file(config: &Config, contents: Vec<u8>) {
    let mut file = File::create(&config.output_file_path).unwrap();
    let mut size = 0;
    for (index,value) in contents.iter().enumerate() {
       file.write_all(&value.to_le_bytes()).unwrap();
       size = index;
    }
    println!("Output file {} with size {}",&config.output_file_path,size*2);
}
//
fn string2array(key: String) -> [u8;32]{
  let mut result:[u8;32]= [0; 32];
  for (index, y) in key[..32].chars().enumerate() {
        let z = (y.to_string()).parse::<u8>().unwrap();
        result[index] = z;
    }
  result
}
//
fn state2data_block(state:&[[u16;4]]) ->[u8;16] {
  let mut result:[u8;16]=[0;16];
  let mut k:usize=0;
  for i in 0..4 {
    for j in 0..4 {
        result[k]=state[i][j] as u8;
        k=k+1;
    }
   }
  result
}
//
fn info(){
  println!("AES Encryption Algorithm Version 0.1.0\n");
  println!("aes <options> <KEY file> <input file> <outputfile>");
  println!("<options> e: encryption, d: decryption");
}
//
fn mix_columns(s: &[[u16; 4]]) -> [[u16; 4]; 4]{
    let mut sp:[u16;4]=[0;4];
    let mut result:[[u16; 4]; 4]=[[0;4];4];
    for c in 0..4 {
       sp[0]= (0x02 | s[0][c])^(0x03|s[1][c])^      s[2][c] ^      s[3][c];
       sp[1]=         s[0][c]^ (0x02|s[1][c])^(0x03|s[2][c])^      s[3][c];
       sp[2]=         s[0][c]^       s[1][c]^ (0x02|s[2][c])^(0x03|s[3][c]);
       sp[3]= (0x03 | s[0][c])^      s[1][c]^       s[2][c] ^(0x02|s[3][c]);

       for i in 0..4 {
         result[i][c]=sp[i];
       }
    }
    result
}
//
fn inv_mix_columns(s: &[[u16; 4]]) -> [[u16; 4]; 4]{
    let mut sp:[u16;8]=[0;8];
    let mut result:[[u16; 4]; 4]=[[0;4];4];
    for c in 0..4 {
       sp[0]= (0x0e | s[0][c])^(0x0b | s[1][c])^(0x0d|s[2][c])^(0x09|s[3][c]);
       sp[1]= (0x09 | s[0][c])^(0x0e | s[1][c])^(0x0b|s[2][c])^(0x0d|s[3][c]);
       sp[2]= (0x0d | s[0][c])^(0x09 | s[1][c])^(0x0e|s[2][c])^(0x0b|s[3][c]);
       sp[3]= (0x0b | s[0][c])^(0x0d | s[1][c])^(0x09|s[2][c])^(0x0e|s[3][c]);

       for i in 0..4 {
         result[i][c]=sp[i];
       }
    }
    result
}
//
/*
fn add_round_key(state: &[[u16; 4]], w:[u16; 32],keycount:usize) -> [[u16;4];4] {
     let mut result:[[u16;4];4]=[[0;4];4];
     for c in 0..4 {
       for r in 0..4 {
         result[r][c]=state[r][c]^w[keycount+1];
       }
     }
     result
}
*/
//
/*
fn inv_add_round_key(state: &[[u16; 4]], w:[u16; 32],keycount:usize ) -> [[u16;4];4] {
     let mut result:[[u16;4];4]=[[0;4];4];
     for c in (0..3).rev() { 
       for r in (0..3).rev() {
         result[r][c]=state[r][c]^w[keycount-1];
       }
     }
    result
}
*/
//
fn sub_word(state: [[u16; 4];4]) -> [[u16; 4]; 4]{
  let s:[u16;256]=[  
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
  ];
  let mut result:[[u16; 4]; 4]=[[0;4];4];
  for row in 0..4 {
      for col in 0..4 {
        result[row][col]=s[state[row][col] as usize];
      }
  }
  result
}
//
fn inv_sub_word(state: [[u16; 4];4]) -> [[u16; 4]; 4]{
  let inv_s:[u16;256]=[
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
 ]; 
  let mut result:[[u16; 4]; 4]=[[0;4];4];
  for row in 0..4 {
    for col in 0..4 {
      result[row][col]=inv_s[state[row][col] as usize];
    }
  }
  result
}
//
fn shift_rows(state: &[[u16; 4]]) -> [[u16; 4]; 4]{
    let mut result:[[u16; 4]; 4]=[[0;4];4];
    let mut t:[u16;4]=[0;4];
    for r in 0..4 {
      for c in 0..4 {
        t[c]=state[r][(c+r)%4];
      }
      for c in 0..4 {
        result[r][c]=t[c];
      }
    }
    result
}
//
fn inv_shift_rows(state: &[[u16; 4]]) -> [[u16; 4]; 4]{
    let mut t:[u16;4]=[0;4];
    let mut result:[[u16; 4]; 4]=[[0;4];4];
    for r in 0..4 {
      for c in 0..4 {
        t[(c+r)%4]=state[r][c];
      }
      for c in 0..4 {
        result[r][c]=t[c];
      }
    }
    result
}
//
/*
fn key_expansion(key:[u16;32]) -> [[u16; 60]; 4]{ 
  let rcon:[u8;256]=[
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  ];

  let mut tmp:[u16;8]=[0;8];
  let mut w:[[u16; 60]; 4] = [[0; 60]; 4];
  let mut i:usize = 0; 
  while i < 8 {
     w[i] = [ key[4*i] as u16, key[4*i+1] as u16, key[4*i+2] as u16, key[4*i+3] as u16];
     i=i+1;
  }
  i = 8;
  while i<60 {
     tmp = w[i-1];
     if i%8 == 0 {
       tmp = sub_word(&rot_word(tmp))^rcon[i/8 as usize];
     }
     w[i] = w[i-8]^tmp;
     i=i+1;
  }
  w
} 
*/
//
fn rot_word(w:[u16;4]) -> [u16; 4]{
  let mut result:[u16;4]=[0;4];
  result[3]=w[0];
  result[0]=w[1];
  result[1]=w[2];
  result[2]=w[3];
  result
}
//
fn create_state(data:[u8;16]) ->[[u16;4];4]{
   let mut state:[[u16; 4]; 4] = [[0; 4]; 4];
   let mut c = 0;
   for i in 0..4 {
     for j in 0..4 {
       state[i][j]=data[c] as u16;
       c=c+1;
     }
   }
   state   
}
//
fn aes_encrypt(mut input:Vec<u8>,z:[u8;32],size:usize) -> Vec<u8>{
   let mut result:Vec<u8> = vec![];
   let mut k:[[u16;60];4];
   let mut block:[u8;16];
   let padding:usize = size%16;
   let mut w:usize = size+padding+16;
   for _i in 0..padding+16{
       let x:u8 = 32;
       input.push(x.into());
   }
   println!("key {:?}", z);
   let zz:[[u16;4];4]=[[0;4];4];//key_expansion(z);
   let mut g = 0;
   loop {
     if w<16 { return result; }
     block = input[g..(g+16)].try_into().unwrap(); // block of 16 bytes = 128 bits
     let state = create_state(block); 
/*
    //let ark=add_round_key(&state,zz,0);
   for i in 1..14 {
      let sw = sub_word(state);
      let sr = shift_rows(&sw);
      let mc = mix_columns(&sr);
      //state = add_round_key(&mc,zz,i);
   }
   let sw = sub_word(state);
   let sr = shift_rows(&sw);
    //ark = add_round_key(&sr,zz,14);
*/
    let last = state2data_block(&state);
    result.extend(last.to_vec().iter().copied());
    w=w-16;
    g=g+16;
  }
}
//
fn aes_decrypt(mut input:Vec<u8>,z:[u8;32],size:usize) -> Vec<u8>{
  let mut result:Vec<u8> = vec![];
  let mut k:[[u16;60];4];
  let mut block:[u8;16];
  let padding:usize = size%16;
  let mut w:usize= size+padding;
  for _i in 0..padding{
       let x:u8 = 32;
       input.push(x.into());
  }
  println!("key {:?}", z);
  let zz:[[u16;4];4]=[[0;4];4];//key_expansion(z);
  let mut g=0;
  loop {
    if w<16 { return result; }
    block = input[g..(g+16)].try_into().unwrap(); // block of 16 bytes = 128 bits
    let state = create_state(block);
/*
    //let ark = inv_add_round_key(&state,zz,14);
    for i in (0..13).rev() {
      let isr = inv_shift_rows(&state);
      let isw = inv_sub_word(isr);
      //ark = inv_add_round_key(&isw,zz,i);
      //state = inv_mix_columns(&ark);
    } 
    let isr = inv_shift_rows(&state);
    let isw = inv_sub_word(isr);
    //let iark = inv_add_round_key(&isb,zz,0);
*/
    let last=state2data_block(&state);
    result.extend(last.to_vec().iter().copied());
    w=w-16;
    g=g+16;
  }
}
//
fn main(){
  let args: Vec<String> = env::args().collect();
  let config = Config::build(&args).unwrap_or_else(|err| {
        println!("Problem parsing arguments: {err}");
        process::exit(1);
    });
  let key = open_key_file(&config);
  let (vector_contents,size) = read_input_file(&config);
  println!("size:{size}");
  match config.mode.as_str() {
        // Encrypt
        "e" => {
            println!("Encrypt!");
            let encryption_keys = string2array(key);
            let output = aes_encrypt(vector_contents,encryption_keys,size);
            write_output_file(&config, output);
        },
        // Decrypt
        "d" => {
            println!("Decrypt!");
            let decryption_keys = string2array(key);
            let output = aes_decrypt(vector_contents,decryption_keys,size);
            write_output_file(&config, output);
        },
        _ => info(),
    }
}


#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_create_state() {
       let mut block:[u8;16]=[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3];
       let state = create_state(block);
       let expected:[[u16;4];4]=[[0,1,2,3],[0,1,2,3],[0,1,2,3],[0,1,2,3]];
       assert_eq!(state,expected);
    }
    #[test]
    fn test_string2array() {
       let key = "01234567890123456789012345678901".to_string();
       let expected:[u8;32]=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1];
       let encryption_keys = string2array(key);
       assert_eq!(encryption_keys,expected);
    }
   #[test]
   fn test_state2data_block() {
       let state:[[u16;4];4]=[[0,1,2,3],[0,1,2,3],[0,1,2,3],[0,1,2,3]];
       let expected:[u8;16]=[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3];
       let last = state2data_block(&state);
       assert_eq!(last,expected);
    }
   #[test]
   fn test_rot_word() {
       let word:[u16;4]=[0,1,2,3];
       let expected:[u16;4]=[1,2,3,0];
       let result = rot_word(word);
       assert_eq!(result,expected);
    }
   #[test]
   fn test_mix_columns() {
        let state:[[u16;4];4]=[[0,1,2,3],[0,1,2,3],[0,1,2,3],[0,1,2,3]];
        let mix = mix_columns(&state);
        let unmix = inv_mix_columns(&mix);
        assert_eq!(state,unmix);
    }
   #[test]
   fn test_sub_word() {
        let state:[[u16;4];4]=[[0,1,2,3],[0,1,2,3],[0,1,2,3],[0,1,2,3]];
        let mix = sub_word(state);
        let unmix = inv_sub_word(mix);
        assert_eq!(state,unmix);
    }
   #[test]
   fn test_shift_rows() {
        let state:[[u16;4];4]=[[0,1,2,3],[0,1,2,3],[0,1,2,3],[0,1,2,3]];
        let mix = shift_rows(&state);
        let unmix = inv_shift_rows(&mix);
        assert_eq!(state,unmix);
    }
}
